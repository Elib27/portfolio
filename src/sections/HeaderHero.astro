---
---

<section id="home">
  <h1>
    <span class="line animated">
      <span class="color-transition">
        Hello, je suis <span class="text-gradient">Eliot Bas</span>,
      </span>
    </span>
    <br /><span class="bg-text line animated">d√©veloppeur web freelance</span>
  </h1>
  <div class="three-canvas-container animated">
    <canvas id="three-canvas"></canvas>
  </div>
</section>

<style lang="scss">
  #home {
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    h1 {
      padding-left: 10%;
      transform: translateY(-50%);
      font-size: clamp(1rem, 5vw, 4rem);
      font-weight: 800;
      line-height: 1.4;
      margin: 0;
      .color-transition {
        transition: color var(--theme-transition);
      }
      .text-gradient {
        color: var(--accent);
      }
      .bg-text {
        background: linear-gradient(45deg, var(--accent), #6368f2);
        color: var(--white);
        padding: 0 1.6rem 0.2rem 1.6rem;
      }
      .line {
        display: inline-block;
        transform-origin: left center;
        transition: transform 1s cubic-bezier(0, 0, 0.16, 1);
        &:first-of-type {
          transition-delay: 0.2s;
        }
        &:last-of-type {
          transition-delay: 0.35s;
        }
      }
      .animated {
        transform: translateY(40px) rotate(15deg);
      }
    }
    .three-canvas-container {
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      -webkit-mask-image: linear-gradient(
        to right,
        rgba(0, 0, 0, 1) 50%,
        transparent 60%
      );
      -webkit-mask-size: 250% 100%;
      -webkit-mask-position: left;
      transition: -webkit-mask-position 1s linear 0.4s;
      pointer-events: none;
      &.animated {
        -webkit-mask-position: right;
      }
      #three-canvas {
        -webkit-mask-image: linear-gradient(
          rgba(0, 0, 0, 1) 80%,
          transparent 100%
        );
      }
    }
  }
</style>

<script>
  import * as THREE from 'three'

  const renderCanvas = document.querySelector(
    '#three-canvas'
  ) as HTMLCanvasElement

  const scene = new THREE.Scene()

  const camera = new THREE.PerspectiveCamera(
    75,
    document.body.clientWidth / window.innerHeight,
    0.1,
    1000
  )

  const renderer = new THREE.WebGLRenderer({
    canvas: renderCanvas,
    antialias: true,
    alpha: true,
  })
  renderer.setSize(document.body.clientWidth, window.innerHeight)
  renderer.setPixelRatio(window.devicePixelRatio)

  camera.position.set(0, 2, 0)

  // Lines

  const LINES_COUNT = 20
  const LINES_SPACE = 0.7
  const LINES_ROTATION = 0.04

  const curve = new THREE.SplineCurve([
    new THREE.Vector2(-20, -1),
    new THREE.Vector2(-10, -2),
    new THREE.Vector2(-5, -2),
    new THREE.Vector2(0, 0),
    new THREE.Vector2(5, 2),
    new THREE.Vector2(10, 0),
    new THREE.Vector2(20, -2),
  ])

  const points = curve.getPoints(100)
  const geometry = new THREE.BufferGeometry().setFromPoints(points)

  const splineGroup = new THREE.Group()
  for (let i = 0; i < LINES_COUNT; i++) {
    const material = new THREE.LineBasicMaterial({ color: 0x585efb })
    const spline = new THREE.Line(geometry, material)
    spline.position.z = -i * LINES_SPACE
    if (i < LINES_COUNT / 2) {
      spline.rotation.z = i * LINES_ROTATION
    } else {
      spline.rotation.z = LINES_ROTATION * (LINES_COUNT - 1 - i)
    }
    splineGroup.add(spline)
  }
  scene.add(splineGroup)

  function animate() {
    const currTime = Date.now() / 1000
    for (let i = 0; i < LINES_COUNT; i++) {
      splineGroup.children[i].rotation.z = Math.sin(currTime + i / 5) * 0.15
    }
    renderer.render(scene, camera)
    requestAnimationFrame(animate)
  }

  animate()

  function onWindowResize() {
    camera.aspect = document.body.clientWidth / window.innerHeight
    camera.updateProjectionMatrix()
    renderer.setSize(document.body.clientWidth, window.innerHeight)
    renderer.setPixelRatio(window.devicePixelRatio)
  }

  window.addEventListener('resize', onWindowResize)
</script>
