---

---

<section id="home">
  <h1>
    Hello, je suis<span class="text-gradient"> Eliot Bas</span>,
    <br><span class="bg-text">d√©veloppeur web freelance</span>
  </h1>
  <canvas id="three-canvas"></canvas>
</section>

<style lang="scss">
  #home {
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    h1 {
      padding-left: 10%;
      transform: translateY(-50%);
      font-size: clamp(1rem, 5vw, 4rem);
      font-weight: 800;
      line-height: 1.4;
      margin: 0;
    }
    .text-gradient {
      color: var(--accent);
    }
    .bg-text {
      background: linear-gradient(45deg, var(--accent), #6368f2);
      color: var(--white);
      padding: 0 1.6rem 0.2rem 1.6rem;
    }
    #three-canvas {
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      pointer-events: none;
      -webkit-mask-image: linear-gradient(rgba(0, 0, 0, 1.0) 80%, transparent 100%);
    }
  }
</style>

<script>
  import * as THREE from 'three';

  const renderCanvas = document.querySelector("#three-canvas");

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    document.body.clientWidth / window.innerHeight,
    0.1,
    1000
  );

  const renderer = new THREE.WebGLRenderer({
    canvas: renderCanvas,
    antialias: true,
    alpha: true
  });
  renderer.setSize(document.body.clientWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  

  // Lines

  const LINES_COUNT = 20;
  const LINES_SPACE = 0.7;
  const LINES_ROTATION = 0.04;

  const curve = new THREE.SplineCurve([
    new THREE.Vector2( -10, 0 ),
    new THREE.Vector2( -5, 5 ),
    new THREE.Vector2( 0, 0 ),
    new THREE.Vector2( 5, -5 ),
    new THREE.Vector2( 10, 0 )
  ]);

  const points = curve.getPoints(100);
  const geometry = new THREE.BufferGeometry().setFromPoints( points );

  const splineGroup = new THREE.Group();
  for (let i = 0; i < LINES_COUNT ; i++) {
    const material = new THREE.LineBasicMaterial( { color: 0x585EFB } );
    const spline = new THREE.Line( geometry, material );
    spline.position.z = i * LINES_SPACE;
    spline.rotation.z = i * LINES_ROTATION;
    splineGroup.add(spline);
  }

  scene.add(splineGroup);

  camera.position.z = 15;
  
  let mouseX = 0;
  let mouseY = 0;

  function animateOnMouse(e: MouseEvent) {
    mouseX = e.clientX;
    mouseY = e.clientY;
  }
  
  window.addEventListener('mousemove', animateOnMouse);
  
  function animate() {
    const ratioX = (mouseX / window.innerWidth - 0.5) * 2;
    const ratioY = (mouseY / window.innerHeight - 0.5) * 2;
    splineGroup.rotation.x = Math.sin(ratioY * Math.PI / 2) * Math.PI / 20;
    splineGroup.rotation.y = Math.sin(ratioX * Math.PI / 2) * Math.PI / 20;
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
  }

  animate();

  function onWindowResize() {
    camera.aspect = document.body.clientWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(document.body.clientWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
  } 

  window.addEventListener('resize', onWindowResize);

</script>