---

---

<section id="home">
  <h1>
    Hello, je suis<span class="text-gradient"> Eliot Bas</span>,
    <br>d√©veloppeur web freelance
  </h1>
  <canvas id="three-canvas"></canvas>
</section>

<style lang="scss">
  #home {
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    h1 {
      padding-left: 10%;
      transform: translateY(-50%);
      font-size: clamp(1rem, 5vw, 4rem);
      font-weight: 800;
      margin: 0;
    }
    .text-gradient {
      color: var(--accent);
    }
    #three-canvas {
      position: absolute;
      top: 0;
      left: 0;
      height: 100vh;
      width: 100%;
      z-index: -1;
      pointer-events: none;
    }
  }
</style>

<script>
  import * as THREE from 'three';

  const renderCanvas = document.querySelector("#three-canvas");

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    document.body.clientWidth / window.innerHeight,
    0.1,
    1000
  );

  const renderer = new THREE.WebGLRenderer({
    canvas: renderCanvas,
    antialias: true,
    alpha: true
  });
  renderer.setSize(document.body.clientWidth, window.innerHeight);
  
  
  // Points
  
  const PARTICLES_COUNT = 500;
  const DISTANCE_FROM_CENTER = 30;
  
  const vertices = new Float32Array(PARTICLES_COUNT * 3);
  
  for (let i = 0; i < PARTICLES_COUNT; i++) {
    vertices[3*i] = THREE.MathUtils.randFloatSpread(DISTANCE_FROM_CENTER * 2);
    vertices[3*i + 1] = THREE.MathUtils.randFloatSpread(DISTANCE_FROM_CENTER * 2);
    vertices[3*i + 2] = THREE.MathUtils.randFloatSpread(DISTANCE_FROM_CENTER - 5);
  }
  
  const circleAlphaMap = new THREE.TextureLoader().load("circle.jpg");

  const geometry = new THREE.BufferGeometry();
  geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));

  const material = new THREE.PointsMaterial({
    transparent: true,
    alphaMap: circleAlphaMap,
    alphaTest: 0.2,
    color: 0xfea600,
    size: 1
  });
  const points = new THREE.Points(geometry, material);

  const pointsGroup = new THREE.Group();
  pointsGroup.add(points); 

  scene.add(pointsGroup);

  camera.position.z = 15;
  
  let mouseX = 0;
  let mouseY = 0;
  function animateOnMouse(e: MouseEvent) {
    mouseX = e.clientX;
    mouseY = e.clientY;
  }
  
  window.addEventListener('mousemove', animateOnMouse);
  
  function animate() {
    const ratioX = (mouseX / window.innerWidth - 0.5) * 2;
    const ratioY = (mouseY / window.innerHeight - 0.5) * 2;
    pointsGroup.rotation.x = Math.sin(ratioY * Math.PI / 2) * Math.PI / 20;
    pointsGroup.rotation.y = Math.sin(ratioX * Math.PI / 2) * Math.PI / 20;
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
  }

  animate();


  function onWindowResize() {
    camera.aspect = document.body.clientWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(document.body.clientWidth, window.innerHeight);
  } 

  window.addEventListener('resize', onWindowResize);

</script>